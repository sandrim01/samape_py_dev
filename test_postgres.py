#!/usr/bin/env python3
"""
Teste espec√≠fico de conex√£o PostgreSQL Railway
"""

import os
import sys

def test_database_connection():
    """Testa a conex√£o com o banco PostgreSQL"""
    
    # URL fornecida pelo usu√°rio
    database_url = "postgresql://postgres:fzsZiDkvLIsSlVGzrOyEbgWTStUvfsQA@centerbeam.proxy.rlwy.net:51097/railway"
    
    print("üóÑÔ∏è  Testando conex√£o PostgreSQL Railway...")
    print(f"URL: {database_url[:30]}...{database_url[-20:]}")
    
    try:
        # Tentar com psycopg2
        import psycopg2
        print("‚úÖ psycopg2 importado")
        
        # Tentar conex√£o direta
        conn = psycopg2.connect(database_url)
        cursor = conn.cursor()
        
        # Teste simples
        cursor.execute("SELECT version();")
        version = cursor.fetchone()
        print(f"‚úÖ PostgreSQL conectado: {version[0][:50]}...")
        
        # Testar cria√ß√£o de tabela
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS test_table (
                id SERIAL PRIMARY KEY,
                name VARCHAR(50)
            );
        """)
        conn.commit()
        print("‚úÖ Cria√ß√£o de tabela funcionando")
        
        # Limpeza
        cursor.execute("DROP TABLE IF EXISTS test_table;")
        conn.commit()
        
        cursor.close()
        conn.close()
        print("‚úÖ Banco PostgreSQL funcionando perfeitamente!")
        return True
        
    except ImportError:
        print("‚ùå psycopg2 n√£o instalado")
        return False
        
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        return False

def test_sqlalchemy_connection():
    """Testa conex√£o via SQLAlchemy"""
    
    database_url = "postgresql://postgres:fzsZiDkvLIsSlVGzrOyEbgWTStUvfsQA@centerbeam.proxy.rlwy.net:51097/railway"
    
    print("\nüîó Testando SQLAlchemy...")
    
    try:
        from sqlalchemy import create_engine, text
        
        # Criar engine
        engine = create_engine(database_url)
        print("‚úÖ SQLAlchemy engine criado")
        
        # Testar conex√£o
        with engine.connect() as conn:
            result = conn.execute(text("SELECT 1"))
            if result.scalar() == 1:
                print("‚úÖ SQLAlchemy conectado com sucesso")
                return True
                
    except Exception as e:
        print(f"‚ùå Erro SQLAlchemy: {e}")
        return False

def main():
    print("üîç DIAGN√ìSTICO POSTGRESQL RAILWAY")
    print("=" * 50)
    
    # Definir vari√°vel de ambiente
    os.environ['DATABASE_URL'] = "postgresql://postgres:fzsZiDkvLIsSlVGzrOyEbgWTStUvfsQA@centerbeam.proxy.rlwy.net:51097/railway"
    
    # Testes
    pg_ok = test_database_connection()
    sqlalchemy_ok = test_sqlalchemy_connection()
    
    print("\n" + "=" * 50)
    print("üìä RESULTADO:")
    print(f"   PostgreSQL direto: {'‚úÖ' if pg_ok else '‚ùå'}")
    print(f"   SQLAlchemy: {'‚úÖ' if sqlalchemy_ok else '‚ùå'}")
    
    if pg_ok and sqlalchemy_ok:
        print("\nüéâ Banco funcionando! Problema deve ser na aplica√ß√£o.")
        print("\nüîß Pr√≥ximos passos:")
        print("1. Configurar DATABASE_URL no Railway")
        print("2. Voltar para app.py completo")
        print("3. Testar aplica√ß√£o")
    else:
        print("\nüí• Problema no banco identificado!")
        print("Verifique se PostgreSQL est√° ativo no Railway")
        
    return 0 if (pg_ok and sqlalchemy_ok) else 1

if __name__ == "__main__":
    sys.exit(main())
